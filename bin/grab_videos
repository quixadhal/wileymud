#!/usr/bin/perl -w

use strict;
use Data::Dumper;
use English;
$| = 1;

my $destination = shift || "/share/videos";
$destination =~ s!/$!!; #Remove trailing slash if there
die "$destination does not exist!" unless -d "$destination" or -f "$destination";

my $url_list = "$destination/url.list";
if (-f "$destination" ) {
    # Hmmm, you gave us the URL list file instead of a directory... OK.
    $url_list = $destination;
    my @bits = split /\//, $destination;
    $destination = join '/', @bits[0..($#bits-1)];
}

my $output_format = "$destination/%(season_number)02d.%(episode_number)03d %(title)s.%(ext)s";

sub get_url_list {
    my $url_list = shift;

    die "$url_list does not exist!" if ! -r "$url_list";
    die "$url_list is empty!" if -s "$url_list" < 1;
    die "Cannot open $url_list" unless open(my $fh, "<$url_list");
    my @urls = ();
    foreach (<$fh>) {
        chomp;
        s/^\s+//;
        s/\s+$//;
        next unless /^(#\s.*?\s)?http/i;
        push @urls, $_;
    }
    close $fh;

    return @urls;
}

sub update_url_list {
    my $url_list = shift;
    my $urls = shift;
    my $index = shift;
    my $found = shift;
    my $target = shift;

    return if ! $found;

    $urls->[$index] = "# $target " . $urls->[$index];
    system("mv", "$url_list", "$url_list.bkp");
    die "Cannot update $url_list!" unless open(my $fh, ">$url_list");
    print $fh "$_\n" foreach (@$urls);
    close $fh;
}

sub get_format {
    my $url = shift;
    my $index = shift;

    my $format = undef;
    my $fh = undef;
    unless (open($fh, "-|", "youtube-dl", "--ignore-config", "-sF", "$url")) {
        printf "Cannot open youtube-dl to get format list for %02d!\n", ($index + 1);
        return $format;
    }
    my @lines = (<$fh>);
    close $fh;

    my @candidates = grep {/^(hls-audio-ja-JP-hardsub-en-US(?:[\d\-])+)\s+/i}
        grep {/\d*x1080/i} grep {/mp4a/i} @lines;
    if ((scalar @candidates) < 1) {
        @candidates = grep {/^(hls-audio-ja-JP-hardsub-en-US(?:[\d\-])+)\s+/i}
            grep {/\d*x720/i} grep {/mp4a/i} @lines;
    }
    if ((scalar @candidates) < 1) {
        @candidates = grep {/^(hls-audio-ja-JP-hardsub-en-US(?:[\d\-])+)\s+/i}
            grep {/\d*x480/i} grep {/mp4a/i} @lines;
    }
    # If there is no native version, take the dubbed one...
    # hls-audio-en-US-6998-0                   mp4        1920x1080  [en-US] 6998k , avc1.640028, 24.0fps, mp4a.40.2
    if ((scalar @candidates) < 1) {
        @candidates = grep {/^(hls-audio-en-US(?:[\d\-])+)\s+/i}
            grep {/\d*x1080/i} grep {/mp4a/i} @lines;
    }
    #print "1080 dubbed: " . Dumper(\@candidates); #TODO
    if ((scalar @candidates) < 1) {
        @candidates = grep {/^(hls-audio-en-US(?:[\d\-])+)\s+/i}
            grep {/\d*x720/i} grep {/mp4a/i} @lines;
    }
    if ((scalar @candidates) < 1) {
        @candidates = grep {/^(hls-audio-en-US(?:[\d\-])+)\s+/i}
            grep {/\d*x480/i} grep {/mp4a/i} @lines;
    }

    foreach my $line (@candidates) {
        $line =~ /^(hls-audio-ja-JP-hardsub-en-US(?:[\d\-])+)\s+/i;
        $format = ($1);
        last if $format;
    }

    #print "selected native $format\n" if $format; #TODO
    return $format if $format;

    foreach my $line (@candidates) {
        $line =~ /^(hls-audio-en-US(?:[\d\-])+)\s+/i;
        $format = ($1);
        last if $format;
    }

    #print "selected dubbed: $format\n" if $format; #TODO
    return $format if $format;

    # OK, just take whatever we can find...
    if ((scalar @candidates) < 1) {
        @candidates = grep {/\d*x1080/i} grep {/mp4a/i} @lines;
    }
    if ((scalar @candidates) < 1) {
        @candidates = grep {/\d*x720/i} grep {/mp4a/i} @lines;
    }
    if ((scalar @candidates) < 1) {
        @candidates = grep {/\d*x480/i} grep {/mp4a/i} @lines;
    }
    foreach my $line (@candidates) {
        #1432         mp4        640x480    1432k , avc1.640028, mp4a.40.2 (best)
        $line =~ /^(\d+)\s+mp4/i;
        $format = ($1);
        last if $format;
    }

    #print "selected fallback $format\n" if $format; #TODO
    return $format;
}

sub get_target_filename {
    my $url = shift;
    my $index = shift;
    my $output_format = shift;

    my $filename = undef;
    my $fh = undef;
    unless (open($fh, "-|", "youtube-dl", "--ignore-config", "--get-filename",
            "-o", "$output_format", "$url")) {
        printf "Cannot open youtube-dl to get target filename for %02d!\n",
            ($index + 1);
        return undef;
    }
    $filename = <$fh>;
    close $fh;

    chomp $filename if defined $filename;
    return $filename;
}

my $GREEN = sprintf "%c[32m", 27;
my $YELLOW = sprintf "%c[33m", 27;
my $RED = sprintf "%c[31m", 27;
my $RESET = sprintf "%c[0m", 27;

my @urls = get_url_list($url_list);
die "No valid urls found in $url_list!" if (scalar @urls) < 1;

my @to_process = grep {/^http/} @urls;
printf "Found %d of %d urls to process.\n", (scalar @to_process), (scalar @urls)
    unless (scalar @to_process) < 1;

for (my $index = 0; $index < (scalar @urls); $index++) {
    my $url = $urls[$index];
    next unless $url =~ /^http/i;

    printf "Grabbing %02d of %02d... %s\n",
        ($index + 1), (scalar @urls), substr($url, -40);

    my $target = get_target_filename($url, $index, $output_format);
    my $found = -f "$target" if defined $target;

    if ($target && $found) {
        printf "${YELLOW}Skipping %s, which already exists!$RESET\n", $target;
        update_url_list($url_list, \@urls, $index, $found, $target);
        next;
    }

    printf "Format for %s: ", (defined $target) ?
                              substr($target, -40) : substr($url, -40);
    my $format = get_format($url, $index);
    printf "%s.\n", (defined $format) ? $format : "not found";
    #last if !defined $format; #TODO

    my $nap = int(rand(10));
    printf "Sleeping for %d seconds...\n", $nap;
    sleep $nap;

    next unless (defined $format);

    printf "Fetching... %s ", (defined $target) ?
                              substr($target, -40) : substr($url, -40);
    system("youtube-dl", "--quiet", "--ignore-config", "-f",
        "$format", "-o", "$output_format", "$url");
    system("sync");

    if (!defined $target) {
        printf "%s\n", ($YELLOW . "unknown status!" . $RESET);
    } else {
        $found = -f "$target";
        update_url_list($url_list, \@urls, $index, $found, $target);
        printf "%s\n", ($found ? ($GREEN . "done!" . $RESET)
                               : ($RED . "failed." . $RESET));
    }

    if ($index < (scalar @urls) - 1) {
        printf "----\n";
        $nap = 20 + int(rand(50));
        printf "Sleeping for %d seconds...\n", $nap;
        sleep $nap;
    }
}

# for i in *.mp4; do NEW=`echo "$i" | sed 's/01.\([0-9][0-9]\)/01.0\1/'`; mv -v "$i" "$NEW"; done
