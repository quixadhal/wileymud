#!/usr/bin/perl -w

use utf8;
use strict;
#use open ":encoding(utf8)";
#binmode STDERR, ":encoding(utf8)";
#binmode STDOUT, ":encoding(utf8)";
use Time::HiRes qw(sleep time alarm);
use POSIX qw(strftime);
use Encode qw(encode_utf8);
no warnings 'utf8';
use English;
use Data::Dumper;
use HTTP::Request::Common qw(POST);
use HTML::Entities;
use LWP::UserAgent;
use URI;
#use WWW::Shorten::TinyURL qw(makeashorterlink);
use WWW::Shorten::Bitly;
use DBI;
use JSON;

my $DB_FILE = '/home/wiley/lib/i3/wiley.db';
my $GOOGLE_API_KEY_FILE = '/home/wiley/.google-api.key';
my $BITLY_API_KEY_FILE = '/home/wiley/.bitly-api.key';
my $api_key = undef;
my $db = undef;
my $result = undef;
my $update_sql = undef;

my $prog = $0;
my $url = undef;
my $do_sql = undef;
my $do_debug = undef;
my $channel = undef;
my $speaker = undef;
my $style = undef;

my $RESET   = undef;
my $YELLOW  = undef;
my $RED     = undef;
my $GREEN   = undef;
my $CYAN    = undef;
my $WHITE   = undef;
my $FLASH   = undef;

my $timeout = 15;
my $lwp = LWP::UserAgent->new( cookie_jar => {} );
   $lwp->timeout($timeout);
   $lwp->agent('User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.87 Safari/537.36');
   $URI::ABS_ALLOW_RELATIVE_SCHEME = 1;
   $URI::ABS_REMOTE_LEADING_DOTS = 1; 
   $lwp->max_redirect(5);

sub timestamp {
    my $now = time();
    my $fraction = substr(sprintf("%3.3f", $now - (int $now)), 1);

    my $stamp = strftime("%Y-%m-%d %H:%M:%S", localtime($now));
    return sprintf("%s%s -- ", $stamp, $fraction);
}

sub channel_color {
    my $channel = shift;
    my $colors = {
        "intermud"      => "%^WHITE%^",
        "muds"          => "%^WHITE%^",
        "connections"   => "%^BOLD%^%^WHITE%^",
        "death"         => "%^BOLD%^%^RED%^",
        "cre"           => "%^BOLD%^%^GREEN%^",
        "admin"         => "%^BOLD%^%^MAGENTA%^",
        "newbie"        => "%^B_YELLOW%^%^BLACK%^",
        "gossip"        => "%^B_BLUE%^%^YELLOW%^",

        "wiley"         => "%^BOLD%^%^YELLOW%^",
        "ds"            => "%^BOLD%^%^YELLOW%^",
        "dchat"         => "%^CYAN%^",
        "intergossip"   => "%^GREEN%^",
        "intercre"      => "%^ORANGE%^",
        "pyom"          => "%^FLASH%^%^BOLD%^%^GREEN%^",
        "free_speech"   => "%^BOLD%^%^RED%^",
        "url"           => "%^BOLD%^%^WHITE%^",
        "discord"       => "%^BOLD%^%^MAGENTA%^",

        "ibuild"        => "%^B_RED%^%^YELLOW%^",
        "ichat"         => "%^B_RED%^%^GREEN%^",
        "mbchat"        => "%^B_RED%^%^GREEN%^",
        "pchat"         => "%^B_RED%^%^BOLD%^%^GREEN%^",
        "i2game"        => "%^B_BLUE%^",
        "i2chat"        => "%^B_GREEN%^",
        "i3chat"        => "%^B_RED%^",
        "i2code"        => "%^B_YELLOW%^%^RED%^",
        "i2news"        => "%^B_YELLOW%^%^BLUE%^",
        "imudnews"      => "%^B_YELLOW%^%^CYAN%^",
        "irc"           => "%^B_BLUE%^%^GREEN%^",
        "ifree"         => "%^B_BLUE%^%^GREEN%^",

        "default"       => "%^BOLD%^%^BLUE%^",
        "default-IMC2"  => "%^B_BLUE%^%^BOLD%^%^WHITE%^"
    };

    return $colors->{default} if !defined $channel;
    return $colors->{$channel} if exists $colors->{$channel};
    return $colors->{default};
}

sub pinkfish_to {
    my $string = shift;
    my $style = shift;
    $style = "ansi" if !defined $style;

    return $string if $style eq "debug";
    return $string if $style eq "wiley";

    my $conversion = {
        "ansi"  => {
            '%^RESET%^'                 => "\033[0;0m",

            '%^BOLD%^'                  => "\033[1m",
            '%^FLASH%^'                 => "\033[5m",

            '%^BLACK%^'                 => "\033[30m",
            '%^RED%^'                   => "\033[31m",
            '%^GREEN%^'                 => "\033[32m",
            '%^ORANGE%^'                => "\033[33m",
            '%^BLUE%^'                  => "\033[34m",
            '%^MAGENTA%^'               => "\033[35m",
            '%^CYAN%^'                  => "\033[36m",
            '%^DARKGREY%^'              => "\033[37m",

            '%^GREY%^'                  => "\033[1;30m",
            '%^PINK%^'                  => "\033[1;31m",
            '%^LIGHTRED%^'              => "\033[1;31m",
            '%^LIGHTGREEN%^'            => "\033[1;32m",
            '%^YELLOW%^'                => "\033[1;33m",
            '%^LIGHTBLUE%^'             => "\033[1;34m",
            '%^LIGHTMAGENTA%^'          => "\033[1;35m",
            '%^LIGHTCYAN%^'             => "\033[1;36m",
            '%^WHITE%^'                 => "\033[1;37m",

            '%^B_BLACK%^'               => "\033[40m",
            '%^B_RED%^'                 => "\033[41m",
            '%^B_GREEN%^'               => "\033[42m",
            '%^B_ORANGE%^'              => "\033[43m",
            '%^B_BLUE%^'                => "\033[44m",
            '%^B_MAGENTA%^'             => "\033[45m",
            '%^B_CYAN%^'                => "\033[46m",
            '%^B_DARKGREY%^'            => "\033[47m",

            # Bold backgrounds are not supported by normal ANSI
            '%^B_GREY%^'                => "\033[40m",
            '%^B_PINK%^'                => "\033[41m",
            '%^B_LIGHTRED%^'            => "\033[41m",
            '%^B_LIGHTGREEN%^'          => "\033[42m",
            '%^B_YELLOW%^'              => "\033[43m",
            '%^B_LIGHTBLUE%^'           => "\033[44m",
            '%^B_LIGHTMAGENTA%^'        => "\033[45m",
            '%^B_LIGHTCYAN%^'           => "\033[46m",
            '%^B_WHITE%^'               => "\033[47m",
        },
        "html" => {
            '%^RESET%^'                 => '</SPAN>',

            '%^BOLD%^'                  => '<SPAN style="bold;">',
            '%^FLASH%^'                 => '<SPAN class="blink;">',

            '%^BLACK%^'                 => '<SPAN style="color: #555555">',
            '%^RED%^'                   => '<SPAN style="color: #ff5555">',
            '%^GREEN%^'                 => '<SPAN style="color: #55ff55">',
            '%^ORANGE%^'                => '<SPAN style="color: #ffaa55">',
            '%^BLUE%^'                  => '<SPAN style="color: #5555ff">',
            '%^MAGENTA%^'               => '<SPAN style="color: #ff55ff">',
            '%^CYAN%^'                  => '<SPAN style="color: #55ffff">',
            '%^DARKGREY%^'              => '<SPAN style="color: #aaaaaa">',

            '%^GREY%^'                  => '<SPAN style="color: #aaaaaa">',
            '%^PINK%^'                  => '<SPAN style="color: #ffaaaa">',
            '%^LIGHTRED%^'              => '<SPAN style="color: #ffaaaa">',
            '%^LIGHTGREEN%^'            => '<SPAN style="color: #aaffaa">',
            '%^YELLOW%^'                => '<SPAN style="color: #ffff55">',
            '%^LIGHTBLUE%^'             => '<SPAN style="color: #aaaaff">',
            '%^LIGHTMAGENTA%^'          => '<SPAN style="color: #ffaaff">',
            '%^LIGHTCYAN%^'             => '<SPAN style="color: #aaffff">',
            '%^WHITE%^'                 => '<SPAN style="color: #ffffff">',

            '%^B_BLACK%^'               => '<SPAN style="background-color: #000000">',
            '%^B_RED%^'                 => '<SPAN style="background-color: #ff0000">',
            '%^B_GREEN%^'               => '<SPAN style="background-color: #00ff00">',
            '%^B_ORANGE%^'              => '<SPAN style="background-color: #ffaa00">',
            '%^B_BLUE%^'                => '<SPAN style="background-color: #0000ff">',
            '%^B_MAGENTA%^'             => '<SPAN style="background-color: #ff00ff">',
            '%^B_CYAN%^'                => '<SPAN style="background-color: #00ffff">',
            '%^B_DARKGREY%^'            => '<SPAN style="background-color: #555555">',

            '%^B_GREY%^'                => '<SPAN style="background-color: #aaaaaa">',
            '%^B_PINK%^'                => '<SPAN style="background-color: #ffaaaa">',
            '%^B_LIGHTRED%^'            => '<SPAN style="background-color: #ffaaaa">',
            '%^B_LIGHTGREEN%^'          => '<SPAN style="background-color: #aaffaa">',
            '%^B_YELLOW%^'              => '<SPAN style="background-color: #ffff55">',
            '%^B_LIGHTBLUE%^'           => '<SPAN style="background-color: #aaaaff">',
            '%^B_LIGHTMAGENTA%^'        => '<SPAN style="background-color: #ffaaff">',
            '%^B_LIGHTCYAN%^'           => '<SPAN style="background-color: #aaffff">',
            '%^B_WHITE%^'               => '<SPAN style="background-color: #ffffff">',
        },
    };
    foreach my $k ( keys( %{ $conversion->{$style} } ) ) {
        my $v = $conversion->{$style}{$k};
        $string =~ s/\Q$k\E/$v/gsmx;
    }
    return $string;
}

sub get_final_url {
    my $url = shift;

    return undef if !defined $url;
    return undef if !defined $lwp;

    my $request = HTTP::Request->new(HEAD => $url);
    $request->header('Accept' => 'text/html');
    my $response = undef;

    if($request) {
        print timestamp() . " Got request\n" if $do_debug;
        eval {
            local $SIG{ALRM} = sub { die "Exceeded Timeout of $timeout for $url\n" };
            alarm $timeout;
            $response = $lwp->request($request);
            alarm 0;
        };
        warn timestamp() . " Timeout" if($EVAL_ERROR and ($EVAL_ERROR =~ /^Exceeded Timeout/));

        if( (defined $response) and $response->is_success ) {
            print timestamp() . " Got response\n" if $do_debug;
            my $given_uri = URI->new($url);
            my $origin_uri = $response->request->uri;
            return $origin_uri if defined $origin_uri;
            return $given_uri;
        } elsif( defined $response ) {
            print timestamp() . " Response:".Dumper($response)."\n" if $do_debug;
        }
    }
    print timestamp() . " Failed request or response\n" if $do_debug;
    return undef;
}

sub get_page {
    my $url = shift;

    return undef if !defined $url;
    return undef if !defined $lwp;

    my $request = HTTP::Request->new(GET => $url);
    my $response = undef;

    if($request) {
        eval {
            local $SIG{ALRM} = sub { die "Exceeded Timeout of $timeout for $url\n" };
            alarm $timeout;
            $response = $lwp->request($request);
            alarm 0;
        };
        warn timestamp() . " Timeout" if($EVAL_ERROR and ($EVAL_ERROR =~ /^Exceeded Timeout/));

        if( (defined $response) and $response->is_success ) {
            return $response->content;
        }
    }
    return undef;
}

sub time_parts {
    my $seconds = shift;

    return "0:00" if !defined $seconds;

    my $days    = int( $seconds / (60 * 60 * 24) );
    my $hours   = int( $seconds / (60 * 60) );
    my $minutes = int( $seconds / 60 );
    $hours      = $hours % 24;
    $minutes    = $minutes % 60;
    $seconds    = $seconds % 60;

    if( defined $days and $days > 0 ) {
        return sprintf "%d days, %d:%02d:%02d", $days, $hours, $minutes, $seconds;
    } elsif( defined $hours and $hours > 0 ) {
        return sprintf "%d:%02d:%02d", $hours, $minutes, $seconds;
    } else {
        return sprintf "%d:%02d", $minutes, $seconds;
    }
}

sub get_source {
    my $xurl = shift;

    if (defined $xurl) {
        return "YouTube"        if $xurl =~ /^https?:\/\/.*?youtube\.com/i;
        return "IMDB"           if $xurl =~ /^https?:\/\/.*?imdb\.com/i;
        return "Dailymotion"    if $xurl =~ /^https?:\/\/.*?dailymotion\.com/i;
        return "Steam"          if $xurl =~ /^https?:\/\/.*?steampowered.com/i;
    }
    return undef;
}

sub get_id {
    my $source = shift;
    my $xurl = shift;
    my $page = shift;

    return undef if !defined $source;

    if ($source eq "YouTube") {
        if( defined $xurl ) {
            #https://www.youtube.com/watch?v=PJjTHgJ6rQo
            $xurl =~ /watch\?v=([A-Za-z0-9_-]{11})/i;
            my ($id) =  ($1);
            return $id if defined $id;

            #https://www.youtube.com/playlist?list=PLGB6RkFB7ZmM3KmoGYdYD3KfSF24MTHZV
            $xurl =~ /playlist\?list=([A-Za-z0-9_-]{34})/i;
            ($id) =  ($1);
            return $id if defined $id;
        }
        if( defined $page ) {
            $page =~ /<link\s+rel=\"canonical\"\s+href=\".*?\/watch\?v=([^\"\&]*)\">/i;
            my ($id) =  ($1);
            return $id if defined $id;
        }
    } elsif ($source eq "IMDB") {
        if( defined $xurl ) {
            # http://www.imdb.com/title/tt5171438/?ref_=nv_sr_1
            $xurl =~ /\/title\/(tt\d\d\d\d\d\d\d)\//i;
            my ($id) =  ($1);
            return $id if defined $id;
        }
        if( defined $page ) {
            $page =~ /<meta\s+property=\"pageId\"\s+content=\"(tt\d\d\d\d\d\d\d)\"\s+\/>/i;
            my ($id) =  ($1);
            return $id if defined $id;
        }
    } elsif ($source eq "Dailymotion") {
        if( defined $xurl ) {
            # https://www.dailymotion.com/video/x59wnvy
            $xurl =~ /\/video\/(\w\w\w\w\w\w\w)$/i;
            my ($id) =  ($1);
            return $id if defined $id;
        }
        if( defined $page ) {
            $page =~ /<meta\s+property=\"og:url\"\s+content=\"([^\"]*)\"\/>/i;
            my ($url) =  ($1);
            return undef if !defined $url;
            $url =~ /\/(\w\w\w\w\w\w\w)$/i;
            my ($id) =  ($1);
            return $id if defined $id;
        }
    } elsif ($source eq "Steam") {
        if( defined $xurl ) {
            # http://store.steampowered.com/app/306660/Ultimate_General_Gettysburg/
            $xurl =~ /\/app\/(\d+)\//i;
            my ($id) =  ($1);
            return $id if defined $id;
        }
        if( defined $page ) {
            $page =~ /<link\s+rel=\"canonical\"\s+href=\".*?\/app\/(\d+)\/[^\"]*\">/i;
            my ($id) =  ($1);
            return $id if defined $id;
        }
    }
    return undef;
}

sub get_title {
    my $source = shift;
    my $xurl = shift;
    my $page = shift;

    return undef if !defined $page;

    if (!defined $source) {
        $page =~ /<title>\s*(.*?)\s*<\/title>/i;
        my ($title) = ($1);
        return $title if defined $title;
    } elsif ($source eq "YouTube" or $source eq "IMDB") {
        $page =~ /<meta\s+name=\"title\"\s+content=\"([^\"]*)\"\s*\/?>/i;
        my ($title) =  ($1);
        $title = decode_entities($title) if defined $title;
        return $title if defined $title;
    } elsif ($source eq "Dailymotion") {
        $page =~ /<meta\s+property=\"og:title\"\s+content=\"([^\"]*)\"\s*\/?>/i;
        my ($title) =  ($1);
        $title = decode_entities($title) if defined $title;
        return $title if defined $title;
    }

    return undef;
}

sub get_duration {
    my $source = shift;
    my $xurl = shift;
    my $page = shift;

    return undef if !defined $source;
    return undef if !defined $page;

    if ($source eq "YouTube") {
        $page =~ /<meta\s+itemprop=\"duration\"\s+content=\"([^\"]*)\">/i;
        my ($funky) = ($1);
        return undef if !defined $funky;

        $funky =~ /.*?(\d+)M(\d+)S/;
        my ($minutes, $seconds) = ($1, $2);

        return time_parts($minutes * 60 + $seconds);
    } elsif ($source eq "IMDB") {
        $page =~ /<time\s+itemprop=\"duration\"\s+datetime=\"PT(\d+)M\">/i;
        my ($minutes) = ($1);
        return undef if !defined $minutes;

        return time_parts($minutes * 60);
    } elsif ($source eq "Dailymotion") {
        $page =~ /<meta\s+property=\"video:duration\"\s+content=\"([^\"]*)\"\/>/i;
        my ($seconds) = ($1);
        return undef if !defined $seconds;

        return time_parts($seconds);
    }

    return undef;
}

sub read_google_api {
    my $key = undef;
    my $found = undef;
    open FP, "$GOOGLE_API_KEY_FILE" or die "Cannot find API key file $GOOGLE_API_KEY_FILE: $!";
    while($key = <FP>) {
        chomp $key;
        $key =~ s/^\s+|\s+$//g;
        if (length $key == 39) {
            $found = 1;
            last;
        }
    }
    close FP;
    die "No valid key found in $GOOGLE_API_KEY_FILE!" if !defined $found;
    return $key;
}

sub read_bitly_api {
    my $key = undef;
    my $found = undef;
    open FP, "$BITLY_API_KEY_FILE" or die "Cannot find API key file $BITLY_API_KEY_FILE: $!";
    while($key = <FP>) {
        chomp $key;
        $key =~ s/^\s+|\s+$//g;
        if (length $key == 40) {
            $found = 1;
            last;
        }
    }
    close FP;
    die "No valid key found in $BITLY_API_KEY_FILE!" if !defined $found;
    return $key;
}

sub get_youtube_api {
    my $id = shift;
    return (undef, undef) if !defined $id;

    my $page = undef;
    my $title = undef;
    my $duration = undef;

    $api_key = read_google_api() if !defined $api_key;
    print timestamp() . " Got API key\n" if defined $do_debug and defined $api_key;

    my $data_url = "https://www.googleapis.com/youtube/v3/videos?part=contentDetails%2Csnippet&id=$id&key=$api_key";
    my $request = HTTP::Request->new(GET => $data_url);
    my $response = undef;
    my $data = undef;
    print timestamp() . " Got request\n" if $do_debug;
    if($request) {
        eval {
            local $SIG{ALRM} = sub { die "Exceeded Timeout of $timeout seconds for URL\n" };
            alarm $timeout;
            $response = $lwp->request($request);
            alarm 0;
        };
        warn timestamp() . " Timeout" if($EVAL_ERROR and ($EVAL_ERROR =~ /^Exceeded Timeout/));
        if( (defined $response) and $response->is_success ) {
            #$data = decode_json encode_utf8($response->content);
            print timestamp() . " Got response\n" if $do_debug;
            $data = decode_json $response->content;
        } elsif( defined $response ) {
            print timestamp() . " Response:".Dumper($response)."\n" if $do_debug;
        }
    }
    #    "duration": "PT1H52M28S",
    if( defined $data ) {
        print timestamp() . " Got JSON data\n" if $do_debug;
        if( defined $data->{'items'} ) {
            if( defined $data->{'items'}[0] ) {
                if( defined $data->{'items'}[0]->{'snippet'} ) {
                    if( exists $data->{'items'}[0]->{'snippet'}->{'title'} ) {
                        $title = $data->{'items'}[0]->{'snippet'}->{'title'};
                        $title = decode_entities($title) if defined $title;
                    }
                }
                if( defined $data->{'items'}[0]->{'contentDetails'} ) {
                    if( exists $data->{'items'}[0]->{'contentDetails'}->{'duration'} ) {
                        my $funky = $data->{'items'}[0]->{'contentDetails'}->{'duration'};
                        $funky =~ /PT(?:(\d+)H)?(?:(\d+)M)?(\d+)S/;
                        my ($hours, $minutes, $seconds) = ($1, $2, $3);
                        $hours = 0 if !defined $hours;
                        $minutes = 0 if !defined $minutes;
                        $seconds = 0 if !defined $seconds;
                        $duration = time_parts(($hours * 60 * 60) + ($minutes * 60) + $seconds);
                    }
                }
            }
        }
    }
    return ($title, $duration);
}

sub get_metadata {
    my $source = shift;
    my $the_url = shift;

    my $page = undef;
    my $id = undef;
    my $title = undef;
    my $duration = undef;

    if( defined $source and $source eq "YouTube" ) {
        $id = get_id($source, $the_url, $page);
        ($title, $duration) = get_youtube_api($id);
    } else {
        $page = get_page($the_url);
        $id = get_id($source, $the_url, $page);
        $title = get_title($source, $the_url, $page);
        $duration = get_duration($source, $the_url, $page);
    }

    $id         = "${YELLOW}[${id}]${RESET}"                        if defined $id;
    $duration   = "${RED}(${duration})${RESET}"                     if defined $duration;
    $title      = "${CYAN}${title}${RESET}"                         if defined $title;
    #$title = "${RESET}${WHITE}\xe3\x80\x8c${title}\xe3\x80\x8d${RESET}" if defined $title;

    return ($id, $title, $duration);
}

sub parse_style {
    my $arg = shift;

    return undef if !defined $arg;
    return undef if $arg =~ /^http/i;
    return "wiley" if $arg eq 'wiley';
    return "wiley" if $arg eq '--wiley';
    return "wiley" if $arg eq '-w';
    return "ansi" if $arg eq 'ansi';
    return "ansi" if $arg eq '--ansi';
    return "ansi" if $arg eq '-a';
    return "html" if $arg eq 'html';
    return "html" if $arg eq '--html';
    return "html" if $arg eq '-h';
    return "debug" if $arg eq 'debug';
    return "debug" if $arg eq '--debug';
    return "debug" if $arg eq '-d';
    return "sql" if $arg eq 'sql';
    return "sql" if $arg eq '--sql';
    return "sql" if $arg eq '-s';
    return undef;
}

sub get_tinyurl {
    my $given = shift;
    my $origin = shift;
    my $result = undef;

    # http://tinyurl.com/y9jzgz7o
    
    if( defined $given ) {
        return $given if length $given <= 27;
        return $given if $given =~ /tinyurl\.com\/\w\w\w\w\w\w\w$/i;
        return $given if $given =~ /bit\.ly\/\w\w\w\w\w\w\w$/i;
        return $given if $given =~ /t\.co\/\w\w\w\w\w\w\w\w\w\w$/i;
    }

    if( defined $origin ) {
        return $origin if length $origin <= 27;
        return $origin if $origin =~ /tinyurl\.com\/\w\w\w\w\w\w\w$/i;
        return $origin if $origin =~ /bit\.ly\/\w\w\w\w\w\w\w$/i;
        return $origin if $origin =~ /t\.co\/\w\w\w\w\w\w\w\w\w\w$/i;
    }

    my $check = (defined $origin) ? $origin : $given;
    eval {
        local $SIG{ALRM} = sub { die "Exceeded Timeout of $timeout for $url\n" };
        alarm $timeout;
        #$result = makeashorterlink($check);
        my $token = read_bitly_api();
        my $bitly = WWW::Shorten::Bitly->new(
            access_token => $token,
        );
        $result = $bitly->shorten(longUrl => $check);
        print STDERR timestamp() . " ShortURL = " . Dumper($result) . "\n" if defined $do_debug;
        $result = $result->{url} if defined $result;
        alarm 0;
    };
    warn timestamp() . " Timeout" if($EVAL_ERROR and ($EVAL_ERROR =~ /^Exceeded Timeout/));
    return $result;
}

sub get_channel {
    my $channel = shift;
    my $speaker = shift;

    if( defined $channel ) {
        my $chan_color = channel_color($channel);
        #$channel = "$speaker\@$channel" if defined $speaker;
        $channel = "$speaker on $channel" if defined $speaker;
        if( defined $chan_color ) {
            $channel = "${chan_color}<${channel}>${RESET}";
        } else {
            $channel = "<${channel}>";
        }
    }

    return $channel;
}

sub format_output {
    my $style = shift;
    my $source = shift;
    my $given_host = shift;
    my $origin_host = shift;
    my $tinyurl = shift;
    my $id = shift;
    my $channel = shift;
    my $title = shift;
    my $duration = shift;

    # tiny :: Youtube [foo] on <blah> is Title (1:00)
    # tiny :: Youtube URL on <blah> is Title (1:00)
    # tiny :: foo.com URL on <blah> is Title from arg.com
    # tiny :: foo.com URL on <blah> goes to arg.com
    # tiny :: foo.com URL on <blah> is Title
    # tiny :: foo.com URL on <blah>

    my $two_hosts = 0;
    $two_hosts = 1 if defined $origin_host and $given_host ne $origin_host;

    my $output  = "${RESET}";
       $output .= "${GREEN}$tinyurl :: ${RESET}"        if defined $tinyurl;
       $output .= "${source}"                           if defined $source;
       $output .= "${given_host}"                       if !defined $source;
       $output .= " ${id}"                              if defined $id;
       $output .= " URL"                                if !defined $id;
       $output .= " from ${channel}"                    if defined $channel;
       $output .= " is ${title}"                        if defined $title;
       $output .= " ${duration}"                        if defined $duration;
       $output .= " at ${origin_host}"                  if !defined $source and defined $title and $two_hosts;
       $output .= " goes to ${origin_host}"             if !defined $source and !defined $title and $two_hosts;
       $output .= "\n";

    return $output;
}

sub handle_url {
    # This function can be called in two ways.
    #
    # handle_url($row)
    #     In this case, $row is a reference to a database row retrieved
    #     via DBI as a hashref, and explicitly blessed as 'DBI' by the
    #     caller to avoid mishaps.
    # handle_url($url, $channel)
    #     In this case, both arguments are simple strings, and the channel
    #     may be undef if not applicable (command line use).
    #
    my $sql_row = shift;
    my $url = undef;
    my $channel = undef;
    my $speaker = undef;

    # This check works because isa() can always be called on a non-reference
    # or on a blessed reference.  For a non-reference, it always returns undef.
    # If you pass in an unblessed reference, this will crash.
    if( defined $sql_row and $sql_row->isa('DBI')) {
        $url = $sql_row->{'url'};
        $channel = $sql_row->{'channel'};
        $speaker = $sql_row->{'speaker'};
    } else {
        $url = $sql_row;
        $channel = shift;
        $speaker = shift;
        $sql_row = undef;
    }
    #print Dumper( [ $sql_row, $url, $channel ] );

    $RESET   = pinkfish_to( "%^RESET%^", $style );
    $YELLOW  = pinkfish_to( "%^YELLOW%^", $style );
    $RED     = pinkfish_to( "%^RED%^", $style );
    $GREEN   = pinkfish_to( "%^GREEN%^", $style );
    $CYAN    = pinkfish_to( "%^CYAN%^", $style );
    $WHITE   = pinkfish_to( "%^WHITE%^", $style );
    $FLASH   = pinkfish_to( "%^FLASH%^", $style );

    my $given_uri = URI->new($url);
    my $given_host = $given_uri->host;
    my $origin = get_final_url($url);
    my $origin_host = $origin->host if defined $origin;

    my $tinyurl = get_tinyurl($url, $origin);
    my $the_url = (defined $origin_host) ? $origin : $url;
    my $source = get_source($the_url);

    $channel = get_channel($channel, $speaker);
    my ($id, $title, $duration) = get_metadata($source, $the_url);
    my $output = format_output($style, $source, $given_host, $origin_host,
                               $tinyurl, $id, $channel, $title, $duration);
    my $message = pinkfish_to( $output, $style );

    if(defined $sql_row) {
        my $rv = $update_sql->execute($message, $sql_row->{'created'}, $sql_row->{'url'});
        if($rv) {
        #    $db->commit;
        } else {
            print STDERR $DBI::errstr."\n";
        #    $db->rollback;
        }
    } else {
        if( $do_debug ) {
            $message .= "\n";
            $message .= Dumper({
                   'source' => $source,
                   'id' => $id,
                   'title' => $title,
                   'duration' => $duration,
                   'channel' => $channel,
                   'given_host' => $given_host,
                   'origin_host' => $origin_host,
                   'the_url' => $the_url,
                   'given_uri' => $url,
                   'tinyurl' => $tinyurl,
                   'output' => $output,
                });
            $message .= "\n";
        }
        print "$message\n";
    }
}

$url = shift;
$style = parse_style($url);

if( !defined $style ) {
    $style = 'ansi';
} else {
    $url = shift;
}

if( !defined $url and $style ne 'sql' ) {
    print "Usage: $prog [wiley|ansi|html|debug|sql] URL [channel] [speaker]\n";
    exit 1;
}

if( $style eq 'sql' ) {
    $do_sql = 1;
    $style = 'wiley';
} elsif( $style eq 'debug' ) {
    $do_debug = 1;
    $style = 'wiley';
}

$channel = shift;
$speaker = shift;

#print Dumper( [ $do_sql, $url, $style, $channel ] );
if( $do_sql ) {
    $db = DBI->connect("DBI:SQLite:dbname=$DB_FILE", '', '', { AutoCommit => 1, PrintError => 0, });
    # Fetch all the matches and stuff them into an array of hashes
    $result = $db->selectall_arrayref(qq!
        SELECT created, url, channel, speaker
          FROM urls
         WHERE processed IS NOT 1 AND message IS NULL
      ORDER BY created ASC
      !, { Slice => {} });

    $update_sql = $db->prepare( qq!
        UPDATE urls
           SET message = ?
         WHERE created = ? AND url = ? AND processed IS NOT 1 AND message IS NULL
        !);

    foreach my $r (@$result) {
        bless $r, 'DBI';
        handle_url( $r );
    }
    $db->disconnect();
} else {
    handle_url( $url, $channel, $speaker );
}

exit 1;

