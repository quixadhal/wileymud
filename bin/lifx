#!/usr/bin/env python3

"""
LiFX bulb control

Inspiried by the example from Petr Klus, whose packet
code I am using almost verbatum.

Example: lifx --target all --hue 0 --target-hue 240 --brightness 40
              --target-brightness 10 --time 60
"""

import socket
import time
import sys
import random
from struct import pack, unpack
import logging
from textwrap import wrap
import argparse

logger = logging.getLogger("lifx_packet_tools")

MY_BULBS = (80, 81, 82, 83, 84, 85)
BULB_NAMES = {
        "all"           : [80, 81, 82, 83, 84, 85],
        "front"         : [81, 82],
        "back"          : [83, 84],
        "others"        : [80, 85],
        "frontleft"     : [81],
        "frontright"    : [82],
        "backright"     : [83],
        "backleft"      : [84],
        "kitchen"       : [80],
        "bathroom"      : [85],
        }
COLORS = {
        "red" : {
            "hue" : 0,
            "sat" : 100,
            },
        "green" : {
            "hue" : 0,
            "sat" : 100,
            },
        "blue" : {
            "hue" : 0,
            "sat" : 100,
            },
        "cyan" : {
            "hue" : 0,
            "sat" : 100,
            },
        "purple" : {
            "hue" : 0,
            "sat" : 100,
            },
        "yellow" : {
            "hue" : 0,
            "sat" : 100,
            },
        }
THEMES = {
            "night" : {
                "all" : {
                    "hue" : 0,
                    "sat" : 100,
                    "bri" : 15,
                    "kel" : 9000,
                },
            },
            "day" : {
                "all" : {
                    "hue" : 0,
                    "sat" : 0,
                    "bri" : 40,
                    "kel" : 3200,
                },
            },
            "claris" : {
                "front" : {
                    "hue" : 210,
                    "sat" : 75,
                    "bri" : 25,
                    "kel" : 9000,
                },
                "back" : {
                    "hue" : 308,
                    "sat" : 40,
                    "bri" : 25,
                    "kel" : 9000,
                },
                "kitchen" : {
                    "hue" : 210,
                    "sat" : 65,
                    "bri" : 35,
                    "kel" : 9000,
                },
                "bathroom" : {
                    "hue" : 308,
                    "sat" : 40,
                    "bri" : 35,
                    "kel" : 9000,
                },
            },
        }


RETRIES = 5
DELAY = 0.05
UDP_PORT = 56700
SEQ_NUM = random.randint(0, 255)

DURATION = 0        # In theory a transition time, but seems to do nothing?
KELVIN = 9000
HUE = 0
SATURATION = 100
VALUE = 50

MESSAGE_SET_COLOR = 102
MESSAGE_SET_POWER = 117
MESSAGE_GET_COLOR = 101

MESSAGE_SET_COLOR_ZONES = 501

NO_APPLY = 0
APPLY = 1
APPLY_ONLY = 2

def gen_packet_universal(seq_num, message_type, payload):
    # size
    #packet = b"\x31\x00"

    # binary field
    packet = b"\x00\x34"

    # source
    packet += b"\x00\x00\x00\x00"

    # frame address
    packet += b"\x00\x00\x00\x00\x00\x00\x00\x00"

    # reserved section
    packet += b"\x00\x00\x00\x00\x00\x00"  # NOQA

    # we actually want 6 bits of padding and 2 bits of 1s,
    # res_required and ack_required
    packet += pack(">B", 3)

    packet += pack("<B", seq_num)  # sequence number

    # protocol header
    packet += b"\x00\x00\x00\x00\x00\x00\x00\x00" # padding
    packet += pack("<H", message_type)   # type
    packet += b"\x00\x00"   # padding

    # payload
    packet += payload

    # finally, calculate size adjusting for the size information itself
    packet = pack("<H", len(packet)+2) + packet + b"\x00"

    return packet


def gen_packet(hue=HUE, sat=SATURATION, bri=VALUE, kel=KELVIN, duration=DURATION, seq_num=1):
    if hue < 0 or hue > 360:
        raise Exception("Invalid hue: 0-360")
    if sat < 0 or sat > 100:
        raise Exception("Invalid sat: 0-100")
    if bri < 0 or bri > 100:
        raise Exception("Invalid bri: 0-100")
    if kel < 2500 or kel > 9000:
        raise Exception("Invalid kel: 2500-9000")

    def calc_hue(hue):
        return int(hue / 360.0 * 65535)  # degrees

    def calc_sat(sat):
        return int(sat / 100.0 * 65535)  # percentage

    def calc_bri(bri):
        return int(bri / 100.0 * 65535)  # percentage

    payload = b"\x00"
    adjusted_hue = calc_hue(hue)
    adjusted_sat = calc_sat(sat)
    adjusted_bri = calc_bri(bri)
    adjusted_kel = int(kel)
    adjusted_dur = int(dur)

    payload += pack("<H", adjusted_hue)
    payload += pack("<H", adjusted_sat)
    payload += pack("<H", adjusted_bri)
    payload += pack("<H", adjusted_kel)

    transition_time = pack("<L", adjusted_dur)
    payload += transition_time

    logger.debug(f"Sending {adjusted_hue} {adjusted_sat} {adjusted_bri} {adjusted_kel} {adjusted_dur} {seq_num} => {bulb_ip}")
    return gen_packet_universal(seq_num, MESSAGE_SET_COLOR, payload)


def get_power_packet(seq_num, power_state):
    if type(power_state) != type(True):
        raise Exception("Invalid power state")

    if power_state:
        payload = pack(">H", 65535) # 1 - switched on
    else:
        payload = pack(">H", 0)     # 0 - switched off

    payload += pack("<L", DURATION)      # duration

    return gen_packet_universal(seq_num, MESSAGE_SET_POWER, payload)



def get_colour_zones_packet(start_index, end_index,
    hue, sat, bri, kel, apply_changes, seq_num):

    if start_index < 0 or start_index > 255:
        raise Exception("Invalid start_index: 0-255")
    if end_index < 0 or end_index > 255:
        raise Exception("Invalid end_index: 0-255")
    if start_index > end_index:
        raise Exception("Invalid end_index: needs to be < start_index")
    if hue < 0 or hue > 360:
        raise Exception("Invalid hue: 0-360")
    if sat < 0 or sat > 100:
        raise Exception("Invalid sat: 0-100")
    if bri < 0 or bri > 100:
        raise Exception("Invalid bri: 0-100")
    if kel < 2500 or kel > 9000:
        raise Exception("Invalid kel: 2500-9000")
    if apply_changes not in [0, 1, 2]:
        raise Exception("Invalid apply_changes, allowed: 0, 1 or 2")

    def calc_hue(hue):
        return int(hue / 360.0 * 65535)  # degrees

    def calc_sat(sat):
        return int(sat / 100.0 * 65535)  # percentage

    def calc_bri(bri):
        return int(bri / 100.0 * 65535)  # percentage

    payload = pack("<B", start_index)
    payload += pack("<B", end_index)

    payload += pack("<H", calc_hue(hue))
    payload += pack("<H", calc_sat(sat))
    payload += pack("<H", calc_bri(bri))
    payload += pack("<H", int(kel))

    payload += pack("<L", DURATION)      # duration
    payload += pack("<B", apply_changes) # apply_changes

    logger.debug("test")
    return gen_packet_universal(seq_num, MESSAGE_SET_COLOR_ZONES, payload)



def set_HSBK(bulb_ip, hue=HUE, sat=SATURATION, bri=VALUE, kel=KELVIN, dur=DURATION):
    logger.debug(f"Sending {hue} {sat} {bri} {kel} {dur} => {bulb_ip}")
    for _ in range(RETRIES):
        sock.sendto(gen_packet(hue, sat, bri, kel, dur, SEQ_NUM),
                    (bulb_ip, UDP_PORT))
        #time.sleep(DELAY)


def get_color_info(bulb_ip):
    payload = b""
    buf = b""
    packet = gen_packet_universal(SEQ_NUM, MESSAGE_GET_COLOR, payload)
    sock.sendto(packet, (bulb_ip, UDP_PORT))
    buf, addr = listen_sock.recvfrom(1024)
    if buf is not None:
        # We got data back
        (hue, sat, bri, kel, pow, lab) = unpack("<H<H<H<H<2x<H<32s", buf)
        print(f"GOT: {hue} {sat} {bri} {kel} {pow} {lab}", hue, sat, bri, kel, pow, lab)


class _CLI_ErrorParser(argparse.ArgumentParser):
    """
    The _CLI_ErrorParser is a subclass of argparse for the sole purpose of
    allowing us to route error messages to the standard logging system.

    :return: An object to handle argparse error output
    :rtype: object
    """

    def error(self, message):
        logger.fatal(message)
        sys.exit(2)


class _CLI_Args(object):
    """
    The _CLI_Args class is just a data holder so we can nicely use
    the member notation to get at the values.  This is actually what
    we return when someone tries to make a new instance of CLI_Args.

    :return: An object holding the CLI argument values
    :rtype: object
    """

    def __init__(self):
        self.target = None
        self.ipv4 = None
        self.color = None
        self.hue = None
        self.target_hue = None
        self.saturation = None
        self.target_saturation = None
        self.brightness = None
        self.target_brightness = None
        self.kelvin = None
        self.transition = None
        self.test = None
        self.time = None
        self.theme = None
        self.query = None

    def __str__(self):
        return ', '.join([ '='.join([k,str(v)]) for k,v in self.__dict__.items() ])


class _Arg_Range(argparse.Action):
    def __init__(self, min=None, max=None, *args, **kwargs):
        self.min = min
        self.max = max
        #kwargs["metavar"] = "%s [%d-%d]" % (kwargs['dest'], self.min, self.max)
        super(_Arg_Range, self).__init__(*args, **kwargs)

    def __call__(self, parser, namespace, value, option_string=None):
        if not (self.min <= value <= self.max):
            msg = 'invalid %s number: %r (choose from [%d-%d])' % \
                (self.dest, value, self.min, self.max)
            raise argparse.ArgumentError(self, msg)
        setattr(namespace, self.dest, value)


class CLI_Args(object):
    """
    The CLI_Args class uses argparse to pick apart command line arguments
    and stores the results in the object.  It will then allow the arguments
    passed to be queried.

    :return: CLI argument values
    :rtype: object
    """

    __instance = None       # There can only be one


    def __new__(cls):
        if cls.__instance is None:
            parser = _CLI_ErrorParser(description='LiFX bulb control')
            parser.add_argument('--target',
                                choices=['all', 'front', 'back', 'others',
                                         'frontleft', 'frontright',
                                         'backright', 'backleft',
                                         'kitchen', 'bathroom'],
                                help='name for bulb set to adjust')
            parser.add_argument('--ip',
                                dest='ipv4', type=str,
                                help='IPv4 address of target bulb')
            parser.add_argument('--color',
                                choices=['red', 'green', 'blue'],
                                help='preset color to change bulb to')
            parser.add_argument('--hue',
                                nargs='?', type=float, action=_Arg_Range,
                                default=HUE, min=0, max=360,
                                help='Color hue [%(min)d-%(max)d] for bulb')
            parser.add_argument('--target-hue',
                                dest='target_hue',
                                nargs='?', type=float, action=_Arg_Range,
                                default=None, min=0, max=360,
                                help='Color hue [%(min)d-%(max)d] for bulb')
            parser.add_argument('--sat',
                                dest='saturation',
                                nargs='?', type=float, action=_Arg_Range,
                                default=SATURATION, min=0, max=100,
                                help='Color saturation [%(min)d-%(max)d] for bulb')
            parser.add_argument('--target-sat',
                                dest='target_saturation',
                                nargs='?', type=float, action=_Arg_Range,
                                default=None, min=0, max=100,
                                help='Color saturation [%(min)d-%(max)d] for bulb')
            parser.add_argument('--brightness',
                                nargs='?', type=float, action=_Arg_Range,
                                default=VALUE, min=0, max=100,
                                help='Color brightness [%(min)d-%(max)d] for bulb')
            parser.add_argument('--target-brightness',
                                dest='target_brightness',
                                nargs='?', type=float, action=_Arg_Range,
                                default=None, min=0, max=100,
                                help='Color brightness [%(min)d-%(max)d] for bulb')
            parser.add_argument('--kelvin',
                                nargs='?', type=float, action=_Arg_Range,
                                default=KELVIN, min=2500, max=9000,
                                help='Kelvin base temperature [%(min)d-%(max)d] for bulb')
            parser.add_argument('--test',
                                action='store_true',
                                help='Do a test sequence for all bulbs')
            parser.add_argument('--time',
                                nargs='?', type=float, action=_Arg_Range,
                                default=None, min=0.5, max=900,
                                help='Seconds to change bulb color for ranges [%(min)d-%(max)d]')
            parser.add_argument('--theme',
                                choices=['night', 'day', 'claris'],
                                help='preset themes for bulb groups')
            parser.add_argument('--query',
                                type=str,
                                help='IPv4 address of target bulb')
            args = parser.parse_args()
            cls.__instance = _CLI_Args()
            cls.__instance.target = args.target
            cls.__instance.ipv4 = args.ipv4
            cls.__instance.color = args.color
            cls.__instance.hue = args.hue
            cls.__instance.target_hue = args.target_hue
            cls.__instance.saturation = args.saturation
            cls.__instance.target_saturation = args.target_saturation
            cls.__instance.brightness = args.brightness
            cls.__instance.target_brightness = args.target_brightness
            cls.__instance.kelvin = args.kelvin
            cls.__instance.test = args.test
            cls.__instance.time = args.time
            cls.__instance.theme = args.theme
            cls.__instance.query = args.query
        return cls.__instance


if __name__ == "__main__":
    args = CLI_Args()
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)  # UDP
    listen_sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)  # UDP
    listen_sock.bind(('', UDP_PORT))
    listen_sock.settimeout(1)

    if args.test is True:
        logger.setLevel(logging.ERROR)
        # 3500 was used in the original test case
        logger.error("Testing Hue")
        for x in range(80):
            for b in MY_BULBS:
                bulb_ip = f"192.168.0.{b}"
                set_HSBK(bulb_ip, 360/80*x, SATURATION, VALUE, KELVIN, DURATION)
            time.sleep(0.25)
        logger.error("Testing Saturation")
        for x in range(21):
            for b in MY_BULBS:
                bulb_ip = f"192.168.0.{b}"
                set_HSBK(bulb_ip, HUE, x*5, VALUE, KELVIN, DURATION)
            time.sleep(0.5)
        logger.error("Testing Value")
        for x in range(11):
            for b in MY_BULBS:
                bulb_ip = f"192.168.0.{b}"
                set_HSBK(bulb_ip, HUE, SATURATION, x*10, KELVIN, DURATION)
            time.sleep(1.0)
        logger.error("Testing Kelvin")
        for x in range(10):
            for b in MY_BULBS:
                bulb_ip = f"192.168.0.{b}"
                set_HSBK(bulb_ip, 360, 0, 100, 6500/10*x+2500, DURATION)
            time.sleep(1.0)
        logger.error("All done!")
        for b in MY_BULBS:
            bulb_ip = f"192.168.0.{b}"
            set_HSBK(bulb_ip, 250, SATURATION, 25, KELVIN, DURATION)
        sys.exit(1)

    if args.theme is not None:
        for k in THEMES[args.theme].keys():
            bulb_ip = []
            for b in BULB_NAMES[k]:
                bulb_ip += [f"192.168.0.{b}"]
            hue = THEMES[args.theme][k]["hue"];
            sat = THEMES[args.theme][k]["sat"];
            bri = THEMES[args.theme][k]["bri"];
            kel = THEMES[args.theme][k]["kel"];
            dur=DURATION
            print(f"bulb: {k} -> {hue} {sat} {bri} {kel}");
            for b in bulb_ip:
                set_HSBK(b, hue, sat, bri, kel, dur)
        sys.exit(1)

    if args.query is not None:
        get_color_info(args.query)
        sys.exit(1)

    if args.target is None and args.ipv4 is None:
        logger.fatal("You must specify a target, either by name or by IP address")
        sys.exit(2)

    if args.color is not None:
        logger.fatal(f"color names are not yet supported, but you chose {args.color}")
        sys.exit(2)

    hue=HUE
    target_hue = None
    sat=SATURATION
    target_sat = None
    bri=VALUE
    target_bri = None
    kel=KELVIN
    dur=DURATION
    bulb_ip = []
    time_range = None

    if args.target is not None:
        for b in BULB_NAMES[args.target]:
            bulb_ip += [f"192.168.0.{b}"]
    else:
        bulb_ip = [args.ipv4]

    if args.hue is not None:
        hue = args.hue

    if args.target_hue is not None:
        target_hue = args.target_hue

    if args.saturation is not None:
        sat = args.saturation

    if args.target_saturation is not None:
        target_sat = args.target_saturation

    if args.brightness is not None:
        bri = args.brightness

    if args.target_brightness is not None:
        target_bri = args.target_brightness

    if args.kelvin is not None:
        kelvin = args.kelvin

    if args.time is not None:
        if target_hue is None and target_sat is None and target_bri is None:
            logger.fatal("You must have a range to transition across!")
            sys.exit(2)
        time_range = args.time

    # To properly do target_sat and target_brightness as well, we need
    # to calculate the three values in a single loop and then pass
    # then along, rather than just a range() over each or one.

    diff_hue_dir = 1
    diff_sat_dir = 1
    diff_bri_dir = 1

    if target_hue is not None and target_hue < hue:
        diff_hue_dir = -1

    if target_sat is not None and target_sat < sat:
        diff_sat_dir = -1

    if target_bri is not None and target_bri < bri:
        diff_bri_dir = -1

    if time_range is not None:
        steps = int(time_range * 100) # sleep 0.01
        hue_step = []
        sat_step = []
        bri_step = []

        if target_hue is None:
            target_hue = hue
        n = hue
        d = abs(target_hue - hue)
        for x in range(0, steps):
            n = n + (d / steps * diff_hue_dir)
            hue_step.append(n)

        if target_sat is None:
            target_sat = sat
        n = sat
        d = abs(target_sat - sat)
        for x in range(0, steps):
            n = n + (d / steps * diff_sat_dir)
            sat_step.append(n)

        if target_bri is None:
            target_bri = bri
        n = bri
        d = abs(target_bri - bri)
        for x in range(0, steps):
            n = n + (d / steps * diff_bri_dir)
            bri_step.append(n)

        for s in range(0, steps):
            for b in bulb_ip:
                set_HSBK(b, hue_step[s], sat_step[s], bri_step[s], kel, dur)
            time.sleep(0.01)
        set_HSBK(b, target_hue, target_sat, target_bri, kel, dur)
    else:
        for b in bulb_ip:
            set_HSBK(b, hue, sat, bri, kel, dur)
        

#    if target_hue is not None:
#        if target_hue > hue:
#            for h in range(int(hue*10), int(target_hue*10), 1):
#                for b in bulb_ip:
#                    set_HSBK(b, float(h/10.0), sat, bri, kel, dur)
#                    time.sleep(0.01)
#            set_HSBK(b, target_hue, sat, bri, kel, dur)
#        else:
#            for h in range(int(hue*10), int(target_hue*10), -1):
#                for b in bulb_ip:
#                    set_HSBK(b, float(h/10.0), sat, bri, kel, dur)
#                    time.sleep(0.01)
#            set_HSBK(b, target_hue, sat, bri, kel, dur)
#    else:
#        for b in bulb_ip:
#            set_HSBK(b, hue, sat, bri, kel, dur)


# Set a Get message, with res_required set to 0

# GetColor Packet 101 -> LightState(107) response packet

# LightState(107):
# hue: uint16
# sat: uint16
# bri: uint16
# kel: uint16
# res: 2 bytes
# pow: uint16
# lab: 32 bytes (str)
# res: 8 bytes

